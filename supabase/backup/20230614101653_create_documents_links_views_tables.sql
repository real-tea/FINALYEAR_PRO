CREATE OR REPLACE FUNCTION public.gen_document_id(size integer DEFAULT 8, alphabet text DEFAULT 'abcdefghijklmnopqrstuvwxyz' ::text)
	RETURNS text
	LANGUAGE plpgsql
	AS $function$
DECLARE
	idBuilder text := '';
	counter int := 0;
	bytes bytea;
	alphabetIndex int;
	alphabetArray text[];
	alphabetLength int;
	mask int;
	step int;
BEGIN
	alphabetArray := regexp_split_to_array(alphabet, '');
	alphabetLength := array_length(alphabetArray, 1);
	mask :=(2 << cast(floor(log(alphabetLength - 1) / log(2)) AS int)) - 1;
	step := cast(ceil(1.6 * mask * size / alphabetLength) AS int);
	while TRUE LOOP
		bytes := gen_random_bytes(step);
		while counter < step LOOP
			alphabetIndex :=(get_byte(bytes, counter) & mask) + 1;
			IF alphabetIndex <= alphabetLength THEN
				idBuilder := idBuilder || alphabetArray[alphabetIndex];
				IF length(idBuilder) = size THEN
					RETURN
				LEFT (idBuilder,
					4) || '-' ||
			RIGHT (idBuilder,
				4);
				END IF;
			END IF;
			counter := counter + 1;
		END LOOP;
		counter := 0;
	END LOOP;
END
$function$;

CREATE OR REPLACE FUNCTION public.gen_links_id(alphabet text DEFAULT 'abcdefghijklmnopqrstuvwxyz' ::text)
	RETURNS text
	LANGUAGE plpgsql
	AS $function$
DECLARE
	idBuilder text := '';
	counter int := 0;
	bytes bytea;
	alphabetIndex int;
	alphabetArray text[];
	alphabetLength int;
	mask int;
	step int;
	size int := 6;
BEGIN
	alphabetArray := regexp_split_to_array(alphabet, '');
	alphabetLength := array_length(alphabetArray, 1);
	mask :=(2 << cast(floor(log(alphabetLength - 1) / log(2)) AS int)) - 1;
	step := cast(ceil(1.6 * mask * size / alphabetLength) AS int);
	while TRUE LOOP
		bytes := gen_random_bytes(step);
		while counter < step LOOP
			alphabetIndex :=(get_byte(bytes, counter) & mask) + 1;
			IF alphabetIndex <= alphabetLength THEN
				idBuilder := idBuilder || alphabetArray[alphabetIndex];
				IF length(idBuilder) = size THEN
					RETURN idBuilder;
				END IF;
			END IF;
			counter := counter + 1;
		END LOOP;
		counter := 0;
	END LOOP;
END
$function$;

CREATE TABLE "public"."tbl_documents"(
	"document_id" text NOT NULL DEFAULT gen_document_id(),
	"created_at" timestamp with time zone NOT NULL DEFAULT now(),
	"name" text NOT NULL,
	"source_path" text NOT NULL,
	"source_type" text NOT NULL,
	"created_by" uuid,
	"org_id" text,
	"is_enabled" boolean NOT NULL DEFAULT TRUE,
	"document_seq" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"image" text
);

ALTER TABLE "public"."tbl_documents" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."tbl_links"(
	"link_seq" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"created_at" timestamp with time zone DEFAULT now(),
	"link_id" text NOT NULL DEFAULT gen_links_id(),
	"is_active" boolean NOT NULL DEFAULT TRUE,
	"name" text NOT NULL,
	"document_id" text NOT NULL,
	"created_by" uuid
);

ALTER TABLE "public"."tbl_links" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."tbl_views"(
	"view_seq" bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"viewed_at" timestamp with time zone DEFAULT now(),
	"view_id" text NOT NULL,
	"viewer" text NOT NULL DEFAULT 'anonymous' ::text,
	"link_id" text NOT NULL
);

ALTER TABLE "public"."tbl_views" ENABLE ROW LEVEL SECURITY;

CREATE UNIQUE INDEX tbl_documents_document_id_key ON public.tbl_documents USING btree(document_id);

CREATE UNIQUE INDEX tbl_documents_pkey ON public.tbl_documents USING btree(document_seq);

CREATE UNIQUE INDEX tbl_links_link_id_key ON public.tbl_links USING btree(link_id);

CREATE UNIQUE INDEX tbl_links_pkey ON public.tbl_links USING btree(link_seq);

CREATE UNIQUE INDEX tbl_views_pkey ON public.tbl_views USING btree(view_seq);

CREATE UNIQUE INDEX tbl_views_view_id_key ON public.tbl_views USING btree(view_id);

ALTER TABLE "public"."tbl_documents"
	ADD CONSTRAINT "tbl_documents_pkey" PRIMARY KEY USING INDEX "tbl_documents_pkey";

ALTER TABLE "public"."tbl_links"
	ADD CONSTRAINT "tbl_links_pkey" PRIMARY KEY USING INDEX "tbl_links_pkey";

ALTER TABLE "public"."tbl_views"
	ADD CONSTRAINT "tbl_views_pkey" PRIMARY KEY USING INDEX "tbl_views_pkey";

ALTER TABLE "public"."tbl_documents"
	ADD CONSTRAINT "tbl_documents_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."tbl_documents" validate CONSTRAINT "tbl_documents_created_by_fkey";

ALTER TABLE "public"."tbl_documents"
	ADD CONSTRAINT "tbl_documents_document_id_key" UNIQUE USING INDEX "tbl_documents_document_id_key";

ALTER TABLE "public"."tbl_links"
	ADD CONSTRAINT "tbl_links_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."tbl_links" validate CONSTRAINT "tbl_links_created_by_fkey";

ALTER TABLE "public"."tbl_links"
	ADD CONSTRAINT "tbl_links_document_id_fkey" FOREIGN KEY (document_id) REFERENCES tbl_documents(document_id) ON DELETE CASCADE NOT valid;

ALTER TABLE "public"."tbl_links" validate CONSTRAINT "tbl_links_document_id_fkey";

ALTER TABLE "public"."tbl_links"
	ADD CONSTRAINT "tbl_links_link_id_key" UNIQUE USING INDEX "tbl_links_link_id_key";

ALTER TABLE "public"."tbl_views"
	ADD CONSTRAINT "tbl_views_view_id_key" UNIQUE USING INDEX "tbl_views_view_id_key";

SET check_function_bodies = OFF;

